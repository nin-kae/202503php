version: '3.8'  # Docker Compose 文件版本，推荐使用 3.8 兼容性最好

services:
  # ================================
  # Nginx Web 服务器（反向代理、静态资源处理）
  # ================================
  nginx:
    image: nginx:latest  # 使用最新官方 Nginx 镜像
    container_name: nginx  # 自定义容器名称，方便使用 docker ps 查找
    restart: always  # 当容器意外退出时自动重启，确保高可用
    ports:
      - "80:80"  # 将主机的 80 端口映射到容器的 80 端口，供浏览器访问
    volumes:
      - ${PROJECT_ROOT}:/var/www/html  # 映射宿主机代码目录到容器，支持 Laravel + 多项目开发
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # 使用本地自定义 Nginx 配置
      - ${LOGS_ROOT}/nginx:/var/log/nginx  # 将容器中的 Nginx 日志映射到主机，方便开发查看
    depends_on:
      - php  # 确保 PHP 服务先启动，Nginx 启动时才不会报错
    networks:
      - app_network  # 加入自定义应用网络，所有服务通过该网络通信

  # ================================
  # PHP-FPM 应用服务器（运行 Laravel 项目）
  # ================================
  php:
    build: ./php  # 使用 ./php 目录下的 Dockerfile 构建镜像，包含 Composer 和扩展
    container_name: php
    restart: always
    volumes:
      - ${PROJECT_ROOT}:/var/www/html  # 映射源码目录，Laravel 项目可实时同步
      - ${LOGS_ROOT}/php:/var/log/php  # 映射 PHP 错误日志目录，利于调试
      - ./php/php.ini:/usr/local/etc/php/conf.d/custom-php.ini  # 加载自定义 php.ini 配置文件
    expose:
      - "9000"  # 暴露容器内部 9000 端口供 Nginx 内部访问，不对外暴露
    ports:
      - "5173:5173"  # 用于 Laravel Vite 前端热更新开发环境（Vite 默认端口）
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "php-fpm -t" ]  # 检查 PHP 配置是否正确
      interval: 10s  # 每 10 秒检查一次
      timeout: 5s  # 最长等待时间 5 秒
      retries: 3  # 连续失败 3 次则视为不健康

  # ================================
  # MySQL 数据库服务（持久化存储）
  # ================================
  mysql:
    image: mysql:8.0  # 使用官方 MySQL 8.0 镜像
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root  # 设置 root 用户密码
      MYSQL_DATABASE: 202503php  # 默认创建的数据库
      MYSQL_USER: user  # 创建普通用户
      MYSQL_PASSWORD: password  # 普通用户的密码
      TZ: Asia/Tokyo  # 设置容器内的系统时区，保持时间一致性
    ports:
      - "3306:3306"  # 将 MySQL 默认端口暴露到主机，用于本地工具连接
    volumes:
      - mysql_data:/var/lib/mysql  # 使用命名卷挂载数据库数据，防止数据丢失
      - ${LOGS_ROOT}/mysql:/var/log/mysql  # 映射数据库日志目录
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -u root -proot" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # MailHog 邮件捕获服务（开发测试邮件）
  # ================================
  mailhog:
    image: mailhog/mailhog  # MailHog 是一个用于测试 SMTP 邮件的开发工具
    container_name: mailhog
    restart: always
    ports:
      - "1025:1025"  # SMTP 服务端口（用于 Laravel 配置 MAIL_PORT）
      - "8025:8025"  # Web UI 端口（可在浏览器查看邮件内容）
    networks:
      - app_network

  # ================================
  # Redis 服务（Laravel 缓存、Session、队列驱动）
  # ================================
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"  # Redis 默认端口
    networks:
      - app_network

# ================================
# 命名数据卷（用于持久化数据库数据）
# ================================
volumes:
  mysql_data:

# ================================
# 自定义 Docker 网络（让容器可通过服务名互联）
# ================================
networks:
  app_network:
    driver: bridge